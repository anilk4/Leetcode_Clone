{
    "_id": {
        "$oid": "658b404c152030eb4e1bcd88"
    },
    "id": 1,
    "title": "Two Sum",
    "description": "Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.\n\n\nExample 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\nExample 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\nConstraints:\n`2 <= nums.length <= 103`\n`-109 <= nums[i] <= 109`\n`-109 <= target <= 109`\nOnly one valid answer exists.",
    "difficulty": "Easy",
    "acceptance_rate": 46.7,
    "frequency": 100,
    "accepted": "4.1M",
    "related_topics": "Array,Hash Table",
    "rating": "97",
    "testcase": {
        "cpp": {
            "initial_code": "int main() {\n    std::vector<std::vector<int>> array = {{2, 7, 11, 15}, {3, 2, 4}, {3, 3}};\n    std::vector<int> target = {9, 6, 6};\n\n    std::vector<std::vector<int>> finalOutput(3);\n\n    for (int i = 0; i < array.size(); ++i) {\n        std::vector<int> result = Solution::twoSum(array[i], target[i]);\n        finalOutput[i] = result;\n    }\n\n    for (const auto& result : finalOutput) {\n        std::cout << \"[\";\n        for (int i = 0; < result.size(); ++i) {\n            std::cout << result[i];\n            if (i < result.size() - 1) {\n                std::cout << \", \";\n            }\n        }\n        std::cout << \"]\" << std::endl;\n    }\n\n    return 0;\n}",
            "user_code": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n\n    static std::vector<int> twoSum(std::vector<int>& nums, int target) {\n        \n    }\n};"
        },
        "java": {
            "initial_code": "class Main {\n\n    public static void main(String[] args) {\n\t    \n        int[][] array = {{2, 7, 11, 15}, {3, 2, 4}, {3, 3}};\n        int[] target = {9, 6, 6};\n        \n        int[][] finalOutput = new int[3][];\n        \n        for (int i = 0; i < array.length; i++) {\n            int[] result = Solution.twoSum(array[i], target[i]);\n            finalOutput[i] = result;\n        }\n        \n        System.out.println(Arrays.deepToString(finalOutput));\n    }\n}",
            "user_code": "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Solution\n{\n    //Function to find a continuous sub-array which adds up to a given number.\n    public static int[] twoSum(int[] nums, int target) \n    {\n        // Your code here\n    }\n}"
        },
        "py": {
            "initial_code": "array = [[2, 7, 11, 15], [3, 2, 4], [3, 3]]\ntarget = [9, 6, 6]\n\nfinal_output = []\n\nfor i in range(len(array)):\n    result = two_sum(array[i], target[i])\n    final_output.append(result)\n\nprint(final_output)",
            "user_code": "def two_sum(nums, target):"
        },
        "js": {
            "initial_code": "const array = [[2, 7, 11, 15], [3, 2, 4], [3, 3]];\nconst target = [9, 6, 6];\n\nconst finalOutput = [];\n\nfor (let i = 0; i < array.length; i++) {\n    const result = Solution.twoSum(array[i], target[i]);\n    finalOutput.push(result);\n}\n\nconsole.log(finalOutput);",
            "user_code": "class Solution {\n    // Function to find a continuous sub-array which adds up to a given number.\n    static twoSum(nums, target) {\n        // Your code here\n    }\n}"
        },
        "output": [
            [0, 1],
            [1, 2],
            [0, 1]
        ]
    }
}
